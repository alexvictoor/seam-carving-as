{"version":3,"sources":["../node_modules/@assemblyscript/loader/index.js","find-seam.ts","energy.ts","remove-seam.ts","engine.ts","seam-carving.ts","index.js.ts","index.ts"],"names":["ID_OFFSET","SIZE_OFFSET","ARRAYBUFFER_ID","STRING_ID","ARRAYBUFFERVIEW","ARRAY","STATICARRAY","VAL_ALIGN_OFFSET","VAL_SIGNED","VAL_FLOAT","VAL_MANAGED","ARRAYBUFFERVIEW_BUFFER_OFFSET","ARRAYBUFFERVIEW_DATASTART_OFFSET","ARRAYBUFFERVIEW_BYTELENGTH_OFFSET","ARRAYBUFFERVIEW_SIZE","ARRAY_LENGTH_OFFSET","ARRAY_SIZE","E_NO_EXPORT_TABLE","E_NO_EXPORT_RUNTIME","F_NO_EXPORT_RUNTIME","Error","BIGINT","BigUint64Array","THIS","Symbol","STRING_SMALLSIZE","STRING_CHUNKSIZE","utf16","TextDecoder","fatal","getStringImpl","buffer","ptr","len","Uint32Array","wtf16","Uint16Array","String","fromCharCode","decode","str","off","subarray","preInstantiate","imports","extendedExports","getString","memory","env","abort","msg","file","line","colm","trace","n","args","console","log","slice","join","seed","Date","now","Math","postInstantiate","instance","exports","table","__new","__pin","__unpin","__collect","__rtti_base","getRttiCount","arr","getRttBase","id","U32","getArrayInfo","info","getRttInfo","getValueAlign","clz32","getView","alignLog2","signed","float","Float32Array","Float64Array","Int8Array","Uint8Array","Int16Array","Int32Array","BigInt64Array","__getArrayView","align","buf","length","getTypedArrayView","Type","attachTypedArrayFunctions","ctor","name","getTypedArray","bind","demangle","__newString","U16","i","p","charCodeAt","__newArrayBuffer","bufview","set","__getString","__newArray","valuesOrCapacity","input","isArrayLike","result","view","start","__getArray","out","Array","__getArrayBuffer","__getFunction","index","get","Uint8ClampedArray","forEach","BYTES_PER_ELEMENT","__instanceof","baseId","isResponse","src","Response","isModule","WebAssembly","Module","instantiate","source","instantiateStreaming","module","compile","extended","instantiateSync","Instance","arrayBuffer","setArgumentsLength","value","internalName","Object","keys","elem","parts","split","curr","part","shift","hasOwn","hash","indexOf","className","substring","classElem","prototype","wrap","constructor","valueOf","thisValue","create","writable","getOwnPropertyNames","defineProperty","getOwnPropertyDescriptor","test","getter","replace","setter","enumerable","original","obj","prop","hasOwnProperty","call"],"mappings":"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","file":"src.554d4635.js","sourceRoot":"../src","sourcesContent":["// Runtime header offsets\nconst ID_OFFSET = -8;\nconst SIZE_OFFSET = -4;\n\n// Runtime ids\nconst ARRAYBUFFER_ID = 0;\nconst STRING_ID = 1;\n// const ARRAYBUFFERVIEW_ID = 2;\n\n// Runtime type information\nconst ARRAYBUFFERVIEW = 1 << 0;\nconst ARRAY = 1 << 1;\nconst STATICARRAY = 1 << 2;\n// const SET = 1 << 3;\n// const MAP = 1 << 4;\nconst VAL_ALIGN_OFFSET = 6;\n// const VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;\nconst VAL_SIGNED = 1 << 11;\nconst VAL_FLOAT = 1 << 12;\n// const VAL_NULLABLE = 1 << 13;\nconst VAL_MANAGED = 1 << 14;\n// const KEY_ALIGN_OFFSET = 15;\n// const KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;\n// const KEY_SIGNED = 1 << 20;\n// const KEY_FLOAT = 1 << 21;\n// const KEY_NULLABLE = 1 << 22;\n// const KEY_MANAGED = 1 << 23;\n\n// Array(BufferView) layout\nconst ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\nconst ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\nconst ARRAYBUFFERVIEW_BYTELENGTH_OFFSET = 8;\nconst ARRAYBUFFERVIEW_SIZE = 12;\nconst ARRAY_LENGTH_OFFSET = 12;\nconst ARRAY_SIZE = 16;\n\nconst E_NO_EXPORT_TABLE   = \"Operation requires compiling with --exportTable\";\nconst E_NO_EXPORT_RUNTIME = \"Operation requires compiling with --exportRuntime\";\nconst F_NO_EXPORT_RUNTIME = () => { throw Error(E_NO_EXPORT_RUNTIME); };\n\nconst BIGINT = typeof BigUint64Array !== \"undefined\";\nconst THIS = Symbol();\n\nconst STRING_SMALLSIZE = 192; // break-even point in V8\nconst STRING_CHUNKSIZE = 1024; // mitigate stack overflow\nconst utf16 = new TextDecoder(\"utf-16le\", { fatal: true }); // != wtf16\n\n/** polyfill for Object.hasOwn */\nObject.hasOwn = Object.hasOwn || function(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\n/** Gets a string from memory. */\nfunction getStringImpl(buffer, ptr) {\n  let len = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2] >>> 1;\n  const wtf16 = new Uint16Array(buffer, ptr, len);\n  if (len <= STRING_SMALLSIZE) return String.fromCharCode(...wtf16);\n  try {\n    return utf16.decode(wtf16);\n  } catch {\n    let str = \"\", off = 0;\n    while (len - off > STRING_CHUNKSIZE) {\n      str += String.fromCharCode(...wtf16.subarray(off, off += STRING_CHUNKSIZE));\n    }\n    return str + String.fromCharCode(...wtf16.subarray(off));\n  }\n}\n\n/** Prepares the base module prior to instantiation. */\nfunction preInstantiate(imports) {\n  const extendedExports = {};\n\n  function getString(memory, ptr) {\n    if (!memory) return \"<yet unknown>\";\n    return getStringImpl(memory.buffer, ptr);\n  }\n\n  // add common imports used by stdlib for convenience\n  const env = (imports.env = imports.env || {});\n  env.abort = env.abort || function abort(msg, file, line, colm) {\n    const memory = extendedExports.memory || env.memory; // prefer exported, otherwise try imported\n    throw Error(`abort: ${getString(memory, msg)} at ${getString(memory, file)}:${line}:${colm}`);\n  };\n  env.trace = env.trace || function trace(msg, n, ...args) {\n    const memory = extendedExports.memory || env.memory;\n    console.log(`trace: ${getString(memory, msg)}${n ? \" \" : \"\"}${args.slice(0, n).join(\", \")}`);\n  };\n  env.seed = env.seed || Date.now;\n  imports.Math = imports.Math || Math;\n  imports.Date = imports.Date || Date;\n\n  return extendedExports;\n}\n\n/** Prepares the final module once instantiation is complete. */\nfunction postInstantiate(extendedExports, instance) {\n  const exports = instance.exports;\n  const memory = exports.memory;\n  const table = exports.table;\n  const __new = exports.__new || F_NO_EXPORT_RUNTIME;\n  const __pin = exports.__pin || F_NO_EXPORT_RUNTIME;\n  const __unpin = exports.__unpin || F_NO_EXPORT_RUNTIME;\n  const __collect = exports.__collect || F_NO_EXPORT_RUNTIME;\n  const __rtti_base = exports.__rtti_base;\n  const getRttiCount = __rtti_base ? arr => arr[__rtti_base >>> 2] : F_NO_EXPORT_RUNTIME;\n\n  extendedExports.__new = __new;\n  extendedExports.__pin = __pin;\n  extendedExports.__unpin = __unpin;\n  extendedExports.__collect = __collect;\n\n  /** Gets the runtime type info for the given id. */\n  function getRttInfo(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    if ((id >>>= 0) >= getRttiCount(U32)) throw Error(`invalid id: ${id}`);\n    return U32[(__rtti_base + 4 >>> 2) + (id << 1)];\n  }\n\n  /** Gets the runtime base id for the given id. */\n  function getRttBase(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    if ((id >>>= 0) >= getRttiCount(U32)) throw Error(`invalid id: ${id}`);\n    return U32[(__rtti_base + 4 >>> 2) + (id << 1) + 1];\n  }\n\n  /** Gets and validate runtime type info for the given id for array like objects */\n  function getArrayInfo(id) {\n    const info = getRttInfo(id);\n    if (!(info & (ARRAYBUFFERVIEW | ARRAY | STATICARRAY))) throw Error(`not an array: ${id}, flags=${info}`);\n    return info;\n  }\n\n  /** Gets the runtime alignment of a collection's values. */\n  function getValueAlign(info) {\n    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Gets the runtime alignment of a collection's keys. */\n  // function getKeyAlign(info) {\n  //   return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none\n  // }\n\n  /** Allocates a new string in the module's memory and returns its pointer. */\n  function __newString(str) {\n    if (str == null) return 0;\n    const length = str.length;\n    const ptr = __new(length << 1, STRING_ID);\n    const U16 = new Uint16Array(memory.buffer);\n    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);\n    return ptr;\n  }\n\n  extendedExports.__newString = __newString;\n\n  /** Allocates a new ArrayBuffer in the module's memory and returns its pointer. */\n  function __newArrayBuffer(buf) {\n    if (buf == null) return 0;\n    const bufview = new Uint8Array(buf);\n    const ptr = __new(bufview.length, ARRAYBUFFER_ID);\n    const U8 = new Uint8Array(memory.buffer);\n    U8.set(bufview, ptr);\n    return ptr;\n  }\n\n  extendedExports.__newArrayBuffer = __newArrayBuffer;\n\n  /** Reads a string from the module's memory by its pointer. */\n  function __getString(ptr) {\n    if (!ptr) return null;\n    const buffer = memory.buffer;\n    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];\n    if (id !== STRING_ID) throw Error(`not a string: ${ptr}`);\n    return getStringImpl(buffer, ptr);\n  }\n\n  extendedExports.__getString = __getString;\n\n  /** Gets the view matching the specified alignment, signedness and floatness. */\n  function getView(alignLog2, signed, float) {\n    const buffer = memory.buffer;\n    if (float) {\n      switch (alignLog2) {\n        case 2: return new Float32Array(buffer);\n        case 3: return new Float64Array(buffer);\n      }\n    } else {\n      switch (alignLog2) {\n        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\n        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\n        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\n        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\n      }\n    }\n    throw Error(`unsupported align: ${alignLog2}`);\n  }\n\n  /** Allocates a new array in the module's memory and returns its pointer. */\n  function __newArray(id, valuesOrCapacity = 0) {\n    const input = valuesOrCapacity;\n    const info = getArrayInfo(id);\n    const align = getValueAlign(info);\n    const isArrayLike = typeof input !== \"number\";\n    const length = isArrayLike ? input.length : input;\n    const buf = __new(length << align, info & STATICARRAY ? id : ARRAYBUFFER_ID);\n    let result;\n    if (info & STATICARRAY) {\n      result = buf;\n    } else {\n      __pin(buf);\n      const arr = __new(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);\n      __unpin(buf);\n      const U32 = new Uint32Array(memory.buffer);\n      U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = buf;\n      U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\n      U32[arr + ARRAYBUFFERVIEW_BYTELENGTH_OFFSET >>> 2] = length << align;\n      if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;\n      result = arr;\n    }\n    if (isArrayLike) {\n      const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);\n      const start = buf >>> align;\n      if (info & VAL_MANAGED) {\n        for (let i = 0; i < length; ++i) {\n          view[start + i] = input[i];\n        }\n      } else {\n        view.set(input, start);\n      }\n    }\n    return result;\n  }\n\n  extendedExports.__newArray = __newArray;\n\n  /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */\n  function __getArrayView(arr) {\n    const U32 = new Uint32Array(memory.buffer);\n    const id = U32[arr + ID_OFFSET >>> 2];\n    const info = getArrayInfo(id);\n    const align = getValueAlign(info);\n    let buf = info & STATICARRAY\n      ? arr\n      : U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    const length = info & ARRAY\n      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]\n      : U32[buf + SIZE_OFFSET >>> 2] >>> align;\n    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT).subarray(buf >>>= align, buf + length);\n  }\n\n  extendedExports.__getArrayView = __getArrayView;\n\n  /** Copies an array's values from the module's memory. Infers the array type from RTTI. */\n  function __getArray(arr) {\n    const input = __getArrayView(arr);\n    const len = input.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; i++) out[i] = input[i];\n    return out;\n  }\n\n  extendedExports.__getArray = __getArray;\n\n  /** Copies an ArrayBuffer's value from the module's memory. */\n  function __getArrayBuffer(ptr) {\n    const buffer = memory.buffer;\n    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];\n    return buffer.slice(ptr, ptr + length);\n  }\n\n  extendedExports.__getArrayBuffer = __getArrayBuffer;\n\n  /** Gets a function from poiner which contain table's index. */\n  function __getFunction(ptr) {\n    if (!table) throw Error(E_NO_EXPORT_TABLE);\n    const index = new Uint32Array(memory.buffer)[ptr >>> 2];\n    return table.get(index);\n  }\n\n  extendedExports.__getFunction = __getFunction;\n\n  /** Copies a typed array's values from the module's memory. */\n  function getTypedArray(Type, alignLog2, ptr) {\n    return new Type(getTypedArrayView(Type, alignLog2, ptr));\n  }\n\n  /** Gets a live view on a typed array's values in the module's memory. */\n  function getTypedArrayView(Type, alignLog2, ptr) {\n    const buffer = memory.buffer;\n    const U32 = new Uint32Array(buffer);\n    return new Type(\n      buffer,\n      U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2],\n      U32[ptr + ARRAYBUFFERVIEW_BYTELENGTH_OFFSET >>> 2] >>> alignLog2\n    );\n  }\n\n  /** Attach a set of get TypedArray and View functions to the exports. */\n  function attachTypedArrayFunctions(ctor, name, align) {\n    extendedExports[`__get${name}`] = getTypedArray.bind(null, ctor, align);\n    extendedExports[`__get${name}View`] = getTypedArrayView.bind(null, ctor, align);\n  }\n\n  [\n    Int8Array,\n    Uint8Array,\n    Uint8ClampedArray,\n    Int16Array,\n    Uint16Array,\n    Int32Array,\n    Uint32Array,\n    Float32Array,\n    Float64Array\n  ].forEach(ctor => {\n    attachTypedArrayFunctions(ctor, ctor.name, 31 - Math.clz32(ctor.BYTES_PER_ELEMENT));\n  });\n\n  if (BIGINT) {\n    [BigUint64Array, BigInt64Array].forEach(ctor => {\n      attachTypedArrayFunctions(ctor, ctor.name.slice(3), 3);\n    });\n  }\n\n  /** Tests whether an object is an instance of the class represented by the specified base id. */\n  function __instanceof(ptr, baseId) {\n    const U32 = new Uint32Array(memory.buffer);\n    let id = U32[ptr + ID_OFFSET >>> 2];\n    if (id <= getRttiCount(U32)) {\n      do {\n        if (id == baseId) return true;\n        id = getRttBase(id);\n      } while (id);\n    }\n    return false;\n  }\n\n  extendedExports.__instanceof = __instanceof;\n\n  // Pull basic exports to extendedExports so code in preInstantiate can use them\n  extendedExports.memory = extendedExports.memory || memory;\n  extendedExports.table  = extendedExports.table  || table;\n\n  // Demangle exports and provide the usual utility on the prototype\n  return demangle(exports, extendedExports);\n}\n\nfunction isResponse(src) {\n  return typeof Response !== \"undefined\" && src instanceof Response;\n}\n\nfunction isModule(src) {\n  return src instanceof WebAssembly.Module;\n}\n\n/** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */\nexport async function instantiate(source, imports = {}) {\n  if (isResponse(source = await source)) return instantiateStreaming(source, imports);\n  const module = isModule(source) ? source : await WebAssembly.compile(source);\n  const extended = preInstantiate(imports);\n  const instance = await WebAssembly.instantiate(module, imports);\n  const exports = postInstantiate(extended, instance);\n  return { module, instance, exports };\n}\n\n/** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */\nexport function instantiateSync(source, imports = {}) {\n  const module = isModule(source) ? source : new WebAssembly.Module(source);\n  const extended = preInstantiate(imports);\n  const instance = new WebAssembly.Instance(module, imports);\n  const exports = postInstantiate(extended, instance);\n  return { module, instance, exports };\n}\n\n/** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */\nexport async function instantiateStreaming(source, imports = {}) {\n  if (!WebAssembly.instantiateStreaming) {\n    return instantiate(\n      isResponse(source = await source)\n        ? source.arrayBuffer()\n        : source,\n      imports\n    );\n  }\n  const extended = preInstantiate(imports);\n  const result = await WebAssembly.instantiateStreaming(source, imports);\n  const exports = postInstantiate(extended, result.instance);\n  return { ...result, exports };\n}\n\n/** Demangles an AssemblyScript module's exports to a friendly object structure. */\nexport function demangle(exports, extendedExports = {}) {\n  const setArgumentsLength = exports[\"__argumentsLength\"]\n    ? length => { exports[\"__argumentsLength\"].value = length; }\n    : exports[\"__setArgumentsLength\"] || exports[\"__setargc\"] || (() => { /* nop */ });\n  for (let internalName of Object.keys(exports)) {\n    const elem = exports[internalName];\n    let parts = internalName.split(\".\");\n    let curr = extendedExports;\n    while (parts.length > 1) {\n      let part = parts.shift();\n      if (!Object.hasOwn(curr, part)) curr[part] = {};\n      curr = curr[part];\n    }\n    let name = parts[0];\n    let hash = name.indexOf(\"#\");\n    if (hash >= 0) {\n      const className = name.substring(0, hash);\n      const classElem = curr[className];\n      if (typeof classElem === \"undefined\" || !classElem.prototype) {\n        const ctor = function(...args) {\n          return ctor.wrap(ctor.prototype.constructor(0, ...args));\n        };\n        ctor.prototype = {\n          valueOf() { return this[THIS]; }\n        };\n        ctor.wrap = function(thisValue) {\n          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });\n        };\n        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>\n          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))\n        );\n        curr[className] = ctor;\n      }\n      name = name.substring(hash + 1);\n      curr = curr[className].prototype;\n      if (/^(get|set):/.test(name)) {\n        if (!Object.hasOwn(curr, name = name.substring(4))) {\n          let getter = exports[internalName.replace(\"set:\", \"get:\")];\n          let setter = exports[internalName.replace(\"get:\", \"set:\")];\n          Object.defineProperty(curr, name, {\n            get() { return getter(this[THIS]); },\n            set(value) { setter(this[THIS], value); },\n            enumerable: true\n          });\n        }\n      } else {\n        if (name === 'constructor') {\n          (curr[name] = function(...args) {\n            setArgumentsLength(args.length);\n            return elem(...args);\n          }).original = elem;\n        } else { // instance method\n          (curr[name] = function(...args) { // !\n            setArgumentsLength(args.length);\n            return elem(this[THIS], ...args);\n          }).original = elem;\n        }\n      }\n    } else {\n      if (/^(get|set):/.test(name)) {\n        if (!Object.hasOwn(curr, name = name.substring(4))) {\n          Object.defineProperty(curr, name, {\n            get: exports[internalName.replace(\"set:\", \"get:\")],\n            set: exports[internalName.replace(\"get:\", \"set:\")],\n            enumerable: true\n          });\n        }\n      } else if (typeof elem === \"function\" && elem !== setArgumentsLength) {\n        (curr[name] = (...args) => {\n          setArgumentsLength(args.length);\n          return elem(...args);\n        }).original = elem;\n      } else {\n        curr[name] = elem;\n      }\n    }\n  }\n  return extendedExports;\n}\n\nexport default {\n  instantiate,\n  instantiateSync,\n  instantiateStreaming,\n  demangle\n};\n","let backPtrWeights: Int8Array = new Int8Array(0);\n\nconst i32_MAX_VALUE = Math.pow(2, 31) -1; \n\nexport function findVerticalSeam(\n  energies: Int16Array,\n  imageWidth: number,\n  imageHeight: number,\n  numberOfPixels: number\n): Int32Array {\n  if (backPtrWeights.length < numberOfPixels) {\n    backPtrWeights = new Int8Array(numberOfPixels);\n  }\n\n  let weightIndex = imageWidth;\n\n  const padding = new Int32Array([i32_MAX_VALUE]);\n  let previousLineWeights = new Int32Array(imageWidth + 2);\n  previousLineWeights[0] = i32_MAX_VALUE;\n  previousLineWeights[imageWidth + 1] = i32_MAX_VALUE;\n  previousLineWeights.set(energies.slice(0, imageWidth), 1);\n\n  let currentLineWeights = new Int32Array(imageWidth + 2);\n  \n  // border padding\n  currentLineWeights[0] = i32_MAX_VALUE;\n  currentLineWeights[imageWidth + 1] = i32_MAX_VALUE;\n\n  for (let j: number = 1; j < imageHeight; j++) {\n    for (let i: number = 1; i <= imageWidth; i++, weightIndex++) {\n      cumulateWeights(\n        i,\n        weightIndex,\n        currentLineWeights,\n        previousLineWeights,\n        energies\n      );\n    }\n    let swapTmp = currentLineWeights;\n    currentLineWeights = previousLineWeights;\n    previousLineWeights = swapTmp;\n  }\n\n \n  // find index of last seam pixel\n  let lastIndex = 0;\n  let lastIndexWeight = i32_MAX_VALUE;\n\n  for (let i = 1; i <= imageWidth; i++) {\n    let weight = currentLineWeights[i];\n    if (weight < lastIndexWeight) {\n      lastIndex = i - 1; // remove padding\n      lastIndexWeight = weight;\n    }\n  }\n\n  const weights = backPtrWeights;\n  const seam = new Int32Array(imageHeight);\n  seam[imageHeight - 1] = lastIndex;\n  //trace('seam', 2, imageHeight - 1, lastIndex);\n  for (let i = imageHeight - 2; i + 1 > 0; i--) {\n    let next = seam[i + 1];\n    seam[i] = next + weights[next + (i + 1) * imageWidth];\n    //trace('seam', 2, i, seam[i]);\n  }\n\n  return seam;\n}\n\nfunction cumulateWeights(\n  x: number,\n  ptr: number,\n  currentLineWeights: Int32Array,\n  previousLineWeights: Int32Array,\n  energies: Int16Array\n): void {\n  let weight = previousLineWeights[x];\n  let aboveXDelta = 0;\n  const weightLeft = previousLineWeights[x - 1];\n  if (weightLeft < weight) {\n    /*if (this.forwardEnergy) {\n      trace(\"weightLeft < weight\", 2, weightLeft, weight;\n    }*/\n    weight = weightLeft;\n    aboveXDelta = -1;\n  }\n  const weightRight = previousLineWeights[x + 1];\n  if (weightRight < weight) {\n    weight = weightRight;\n    aboveXDelta = 1;\n  }\n\n  //trace(\"blabla\", 2, ptr, this.backPtrWeights.length)\n  backPtrWeights[ptr] = aboveXDelta;\n  //trace(\"blabla 2\")\n  currentLineWeights[x] = energies[ptr] + weight;\n}\n","let redData = new Uint8Array(0);\nlet greenData = new Uint8Array(0);\nlet blueData = new Uint8Array(0);\n\nlet energies: Int16Array = new Int16Array(0);\n\nexport let latestSeam: Int32Array = new Int32Array(0);\n\nlet topPadding: number = 0;\n\nexport function initEnergyPicture(\n  pictureData: Uint8ClampedArray,\n  width: number,\n  height: number\n): void {\n  const dataWidth = width + 2;\n  topPadding = dataWidth;\n  const dataLength = dataWidth * (height + 2) + 8;\n\n  if (redData.length < dataLength) {\n    redData = new Uint8Array(dataLength);\n    greenData = new Uint8Array(dataLength);\n    blueData = new Uint8Array(dataLength);\n  }\n\n  const numberOfPixels = pictureData.length >> 2;\n\n  if (energies.length < numberOfPixels) {\n    energies = new Int16Array(numberOfPixels + 8);\n  }\n\n  let srcIndex: number = 0;\n  let colorIndex: number = dataWidth + 1;\n\n  //const start = Date.now();\n  for (let y: number = 0; y < height; y++) {\n    for (let x: number = 0; x < width; x++) {\n      redData[colorIndex] = pictureData[srcIndex];\n      greenData[colorIndex] = pictureData[srcIndex + 1];\n      blueData[colorIndex] = pictureData[srcIndex + 2];\n\n      srcIndex += 4;\n      colorIndex++;\n    }\n    colorIndex += 2;\n  }\n}\n\nexport function computeEnergies(\n  width: number,\n  height: number\n): Int16Array {\n  const dataWidth = width + 2;\n\n  let colorIndex: number = topPadding + 1;\n\n  const useLatestSeam = latestSeam.length === height;\n\n  let ptr = 0;\n  let ptrBeginLine = 0 - (width);\n\n  let colorIndexBeginLine = topPadding + 1 - dataWidth;\n\n  for (let y: number = 0; y < height; y++) {\n    ptrBeginLine = ptrBeginLine + (width);\n    ptr = ptrBeginLine;\n\n    colorIndexBeginLine += dataWidth;\n    colorIndex = colorIndexBeginLine;\n\n    let xMin: number = 0;\n    let xMax: number = width;\n    if (useLatestSeam) {\n      const sy = latestSeam[y];\n      xMin = Math.min(Math.max(0, sy - 2), width - 8);\n      xMax = Math.min(width, sy + 2);\n      colorIndex = colorIndexBeginLine + xMin;\n      ptr += xMin;\n    }\n\n    for (let x: number = xMin; x < xMax; x += 1, ptr += 1) {\n      const topOffset = colorIndex - dataWidth;\n      const belowOffset = colorIndex + dataWidth;\n      const leftOffset = colorIndex - 1;\n      const rightOffset = colorIndex + 1;\n\n      //trace('offset', 4, topOffset, rightOffset, belowOffset, leftOffset);\n\n      const energy = (\n        Math.abs(redData[topOffset] - redData[belowOffset]) +\n        Math.abs(redData[leftOffset] - redData[rightOffset]) +\n        Math.abs(greenData[topOffset] - greenData[belowOffset]) +\n        Math.abs(greenData[leftOffset] - greenData[rightOffset]) +\n        Math.abs(blueData[topOffset] - blueData[belowOffset]) +\n        Math.abs(blueData[leftOffset] - blueData[rightOffset]));\n\n        \n      energies[ptr] = energy;\n      colorIndex += 1;\n    }\n  }\n  //trace(\"ptr \" + ptr.toString( + \" \" + energiesPtr.toString() + \" \" + energies.length.toString());\n  return energies;\n}\n\nexport function removeSeamRGB(\n  seam: Int32Array,\n  width: number,\n  height: number\n): void {\n  //latestSeam = seam;\n\n  const oldHeight = height;\n  const oldWidth = width;\n  const newWidth = oldWidth - 1;\n  const oldPtrStep: number = (oldWidth + 2) * 1;\n  const newPtrStep: number = (newWidth + 2) * 1;\n  let oldPtr: number = topPadding;\n  let newPtr: number = oldPtr;\n  for (\n    let y = 0;\n    y < oldHeight;\n    y++, oldPtr += oldPtrStep, newPtr += newPtrStep\n  ) {\n    let sy = seam[y] + 1;\n    redData.copyWithin(newPtr, oldPtr, oldPtr + sy);\n    redData.copyWithin(newPtr + sy, oldPtr + sy + 1, oldPtr + oldPtrStep);\n    greenData.copyWithin(newPtr, oldPtr, oldPtr + sy);\n    greenData.copyWithin(newPtr + sy, oldPtr + sy + 1, oldPtr + oldPtrStep);\n    blueData.copyWithin(newPtr, oldPtr, oldPtr + sy);\n    blueData.copyWithin(newPtr + sy, oldPtr + sy + 1, oldPtr + oldPtrStep);\n  }\n\n  const oldEnergyPtrStep: number = oldWidth;\n  const newEnergyPtrStep: number = newWidth;\n  oldPtr = 0;\n  newPtr = 0;\n\n  for (\n    let y = 0;\n    y < oldHeight;\n    y++, oldPtr += oldEnergyPtrStep, newPtr += newEnergyPtrStep\n  ) {\n    let sy = seam[y];\n    energies.copyWithin(newPtr, oldPtr, oldPtr + sy);\n    energies.copyWithin(\n      newPtr + sy,\n      oldPtr + sy + 1,\n      oldPtr + oldEnergyPtrStep\n    );\n  }\n}\n","export function removeSeam(\n  seam: Int32Array,\n  pictureData: Uint8ClampedArray,\n  width: number,\n  height: number\n): Uint8ClampedArray {\n\n    const result = pictureData;\n    const oldHeight = Math.floor(height);\n    const oldWidth =  Math.floor(width);\n    const newWidth = oldWidth - 1;\n    const oldPtrStep = oldWidth * 4;\n    const newPtrStep = newWidth * 4;\n    let oldPtr = 0;\n    let newPtr = 0;\n    for (\n      let y = 0; y < oldHeight; y++, oldPtr += oldPtrStep, newPtr += newPtrStep\n    ) {\n      let sy = seam[y] * 4;\n      result.copyWithin(newPtr, oldPtr, oldPtr + sy);\n      result.copyWithin(\n        newPtr + sy,\n        oldPtr + sy + 4,\n        oldPtr + oldPtrStep\n      );\n    }\n    return result;\n}\n","import { Engine } from \"./seam-carving\";\nimport { findVerticalSeam } from \"./find-seam\";\nimport { computeEnergies, initEnergyPicture, removeSeamRGB } from \"./energy\";\nimport { removeSeam } from \"./remove-seam\";\n\nexport class RegularEngine implements Engine {\n\n  private imageData: Uint8ClampedArray = new Uint8ClampedArray(0);\n  private imageWidth: number = 0;\n  private imageHeight: number = 0;\n\n  private energies: Int16Array = new Int16Array(0);\n\n  init(data: Uint8ClampedArray, width: number): void {\n    this.imageData = data;\n    this.imageWidth = width;\n    this.imageHeight = data.length / 4 / width;\n    initEnergyPicture(data, this.imageWidth, this.imageHeight);\n  }\n  shrink(): Uint8ClampedArray {\n    const numberOfPixels = this.imageData.length / 4;\n\n    if (this.energies.length < numberOfPixels) {\n      this.energies = new Int16Array(numberOfPixels + 8);\n    }\n\n    for (let index = 0; index < 10; index++) {\n      \n    this.energies = computeEnergies(this.imageWidth, this.imageHeight);\n\n    //console.log({energies: this.energies})\n\n    const seam = findVerticalSeam(this.energies, this.imageWidth, this.imageHeight, numberOfPixels);\n\n    //log<string>(\"eng2 \" + seam[0].toString());\n\n    this.imageData = removeSeam(\n      seam,\n      this.imageData,\n      this.imageWidth,\n      this.imageHeight\n    );\n\n    removeSeamRGB(seam, this.imageWidth,\n      this.imageHeight);\n\n    \n    this.imageWidth--;\n    }\n\n    return this.imageData;\n  }\n\n\n\n  /*\n  @inline\n  private weightFrom(line: StaticArray<number>, x: i16, width: number): number {\n    if (x < 0 || x >= width) {\n      return i32.MAX_VALUE >> 1;\n    }\n    return unchecked(line[x]);\n  }*/\n\n\n}\n","import { RegularEngine } from \"./engine\";\n\n\nlet currentImageData: Uint8ClampedArray;\nlet currentWidth: number;\n\nexport interface Engine {\n  init(data: Uint8ClampedArray, width: number): void,\n  shrink(): Uint8ClampedArray\n}\n\n\nlet engine: Engine = new RegularEngine();\n\nexport function shrinkWidth(srcImage: Uint8ClampedArray, width: number) {\n  /*currentImageData = srcImage;\n  currentWidth = width;\n  Seam.create(currentImageData, currentWidth);*/\n  //return shrinkImage();\n\n  engine.init(srcImage, width);\n  return engine.shrink();\n}\nexport function shrinkWidthWithForwardEnergy(\n  srcImage: Uint8ClampedArray,\n  width: number\n) {\n  currentImageData = srcImage;\n  currentWidth = width;\n  Seam.createWithForwardEnergy(currentImageData, currentWidth);\n  //return shrinkImage();\n}\n\nexport function shrinkImage(): Uint8ClampedArray {\n  /*const seam = Seam.recycle(currentImageData, currentWidth);\n  currentImageData = seam.shrinkWidth();\n  currentWidth--;\n  return currentImageData;*/\n  return engine.shrink();\n}\n\nclass Color {\n   constructor(\n    private data: Uint8ClampedArray,\n    private ptr: number\n  ) {}\n\n  \n  get red(): number {\n    return this.data[this.ptr];\n  }\n\n  \n  get green(): number {\n    return this.data[this.ptr + 1];\n  }\n\n  \n  get blue(): number {\n    return this.data[this.ptr + 2];\n  }\n\n  \n  move(ptr: number): Color {\n    this.ptr = ptr;\n    return this;\n  }\n}\n\nconst whiteData = new Uint8ClampedArray(3);\nwhiteData[0] = 0xFF;\nwhiteData[1] = 0xFF;\nwhiteData[2] = 0xFF;\nconst WHITE = new Color(whiteData, 0);\n\n\nfunction delta(first: Color, second: Color) {\n  const deltaRed = first.red - second.red;\n  const deltaGreen = first.green - second.green;\n  const deltaBlue = first.blue - second.blue;\n\n  return deltaBlue * deltaBlue + deltaGreen * deltaGreen + deltaRed * deltaRed;\n}\n\nclass Picture {\n  northColor: Color;\n  southColor: Color;\n  westColor: Color;\n  eastColor: Color;\n  firstColor: Color;\n  secondColor: Color;\n\n  constructor(\n    public data: Uint8ClampedArray,\n    public width: number,\n    public height: number\n  ) {\n    this.northColor = new Color(data, 0);\n    this.southColor = new Color(data, 0);\n    this.westColor = new Color(data, 0);\n    this.eastColor = new Color(data, 0);\n    this.firstColor = new Color(data, 0);\n    this.secondColor = new Color(data, 0);\n  }\n\n  \n  toPtr(x: number, y: number): number {\n    return (x + y * this.width) << 2;\n  }\n\n  getColorAt(x: number, y: number): Color {\n    if (x < 0 || x >= this.width || y < 0 || y >= this.height) {\n      return WHITE;\n    }\n    return new Color(this.data, this.toPtr(x, y));\n  }\n\n  \n  isOut(x: number, y: number) {\n    return x < 0 || x >= this.width || y < 0 || y >= this.height;\n  }\n\n  \n  energyAt(x: number, y: number): number {\n    const northColor = this.isOut(x, y - 1)\n      ? WHITE\n      : this.northColor.move(this.toPtr(x, y - 1));\n    const southColor = this.isOut(x, y + 1)\n      ? WHITE\n      : this.southColor.move(this.toPtr(x, y + 1));\n    const westColor = this.isOut(x - 1, y)\n      ? WHITE\n      : this.westColor.move(this.toPtr(x - 1, y));\n    const eastColor = this.isOut(x + 1, y)\n      ? WHITE\n      : this.eastColor.move(this.toPtr(x + 1, y));\n\n    return delta(northColor, southColor) + delta(eastColor, westColor);\n  }\n\n  \n  energyDelta(x1: number, y1: number, x2: number, y2: number): number {\n    const firstColor = this.isOut(x1, y1)\n      ? WHITE\n      : this.firstColor.move(this.toPtr(x1, y1));\n    const secondColor = this.isOut(x2, y2)\n      ? WHITE\n      : this.secondColor.move(this.toPtr(x2, y2));\n\n    return delta(firstColor, secondColor);\n  }\n}\n\nclass Seam {\n  static instance: Seam;\n\n  picture: Picture;\n  energies: Float32Array;\n  backPtrWeights: Int8Array;\n  oddLineWeights: Float32Array;\n  evenLineWeights: Float32Array;\n  seam: number[];\n\n  public static create(data: Uint8ClampedArray, width: number): Seam {\n    Seam.instance = new Seam(data, width, false);\n    return Seam.instance;\n  }\n\n  public static createWithForwardEnergy(data: Uint8ClampedArray, width: number): Seam {\n    Seam.instance = new Seam(data, width, true);\n    return Seam.instance;\n  }\n\n  public static recycle(data: Uint8ClampedArray, width: number): Seam {\n    Seam.instance.init(data, width);\n    return Seam.instance;\n  }\n\n  constructor(\n    private data: Uint8ClampedArray,\n    private width: number,\n    private forwardEnergy: boolean\n  ) {\n    this.init(data, width);\n  }\n\n  private init(data: Uint8ClampedArray, width: number): void {\n    this.picture = new Picture(data, width, data.length / (width * 4));\n    if (this.forwardEnergy) {\n      this.backPtrWeights = new Int8Array(data.length >> 2);\n      this.oddLineWeights = new Float32Array(this.width);\n      this.evenLineWeights = new Float32Array(this.width);\n    } else {\n      this.initEnergies();\n    }\n  }\n\n  private initEnergies(): void {\n    let energies = this.energies;\n    const size = this.data.length >> 2;\n    if (!energies || energies.length < size) {\n      energies = new Float32Array(size);\n      this.backPtrWeights = new Int8Array(size);\n      this.oddLineWeights = new Float32Array(this.width);\n      this.evenLineWeights = new Float32Array(this.width);\n    }\n    const picture = this.picture;\n    for (let y: number = 0, w = 0, height = picture.height; y < height; y++) {\n      for (let x: number = 0, width = picture.width; x < width; x++, w++) {\n        energies[w] = picture.energyAt(x, y);\n      }\n    }\n\n    this.energies = energies;\n  }\n\n  \n  private weightFrom(line: Float32Array, x: number, width: number): number {\n    if (x < 0 || x >= width) {\n      return Number.MAX_VALUE;\n    }\n    return line[x];\n  }\n\n  \n  private cumulateWeights(\n    x: number,\n    ptr: number,\n    width: number,\n    currentLineWeights: Float32Array,\n    previousLineWeights: Float32Array\n  ): void {\n    let weight = this.weightFrom(previousLineWeights, x, width);\n    let aboveXDelta: number = 0;\n    const weightLeft = this.weightFrom(previousLineWeights, x - 1, width);\n    if (weightLeft < weight) {\n      weight = weightLeft;\n      aboveXDelta = -1;\n    }\n    const weightRight = this.weightFrom(previousLineWeights, x + 1, width);\n    if (weightRight < weight) {\n      weight = weightRight;\n      aboveXDelta = 1;\n    }\n\n    this.backPtrWeights[ptr] = aboveXDelta;\n    currentLineWeights[x] = this.energies[ptr] + weight;\n  }\n\n  private findVerticalSeamWithoutForwardEnergy(): number[] {\n    const picture = this.picture;\n    const height = Math.floor(picture.height);\n    const width = Math.floor(picture.width);\n    let weightIndex = width;\n    let previousLineWeights = this.evenLineWeights;\n    let currentLineWeights = this.oddLineWeights;\n    previousLineWeights.set(this.energies.subarray(0, width));\n    for (let j: number = 1; j < height; j++) {\n      for (let i: number = 0; i < width; i++, weightIndex++) {\n        this.cumulateWeights(\n          i,\n          weightIndex,\n          width,\n          currentLineWeights,\n          previousLineWeights\n        );\n      }\n      let swapTmp = currentLineWeights;\n      currentLineWeights = previousLineWeights;\n      previousLineWeights = swapTmp;\n    }\n\n    // find index of last seam pixel\n    let lastIndex = 0;\n    let lastIndexWeight = Number.MAX_VALUE;\n\n    for (let i: number = 0; i < width; i++) {\n      let weight = currentLineWeights[i];\n      if (weight < lastIndexWeight) {\n        lastIndex = i;\n        lastIndexWeight = weight;\n      }\n    }\n\n    const weights = this.backPtrWeights;\n    const seam = new Array(height);\n    seam[height - 1] = lastIndex;\n    for (let i = height - 2; i + 1 > 0; i--) {\n      let next = seam[i + 1];\n      let w = next + weights[next + (i + 1) * width];\n      seam[i] = w;\n    }\n\n    return seam;\n  }\n\n  //\n  private cumulateWeightsWithForwardEnergy(\n    x: number,\n    y: number,\n    ptr: number,\n    currentLineWeights: Float32Array,\n    previousLineWeights: Float32Array\n  ): void {\n    //trace(\"cumulateWeightsWithForwardEnergy\", 1, x);\n    //trace(\"cumulateWeightsWithForwardEnergy\", 1, y);\n    const picture = this.picture;\n    const width = picture.width;\n    const costCenter = picture.energyDelta(x - 1, y, x + 1, y);\n    const costLeft = costCenter + picture.energyDelta(x, y - 1, x - 1, y);\n    const costRight = costCenter + picture.energyDelta(x, y - 1, x + 1, y);\n    //trace(\"energyDelta\", 1, costLeft);\n\n    let weight = this.weightFrom(previousLineWeights, x, width) + costCenter;\n    let aboveXDelta: number = 0;\n    const weightLeft = this.weightFrom(previousLineWeights, x - 1, width) + costLeft;\n    if (weightLeft < weight) {\n      weight = weightLeft;\n      aboveXDelta = -1;\n    }\n    //trace(\"energyDelta left\", 1, costLeft);\n    const weightRight = this.weightFrom(previousLineWeights, x + 1, width) + costRight;\n    if (weightRight < weight) {\n      weight = weightRight;\n      aboveXDelta = 1;\n    }\n    //trace(\"energyDelta right\", 1, costLeft);\n\n    this.backPtrWeights[ptr] = aboveXDelta;\n    //trace(\"backPtrWeights\", 1, costLeft);\n\n    currentLineWeights[x] = weight;\n  }\n\n  private findVerticalSeamWithForwardEnergy(): number[] {\n    const picture = this.picture;\n    const height = Math.floor(picture.height);\n    const width = Math.floor(picture.width);\n    let weightIndex = width;\n    this.evenLineWeights.fill(0);\n    let previousLineWeights = this.evenLineWeights;\n    let currentLineWeights = this.oddLineWeights;\n    for (let j: number = 1; j < height; j++) {\n      for (let i: number = 0; i < width; i++, weightIndex++) {\n        //trace(\"i j\", 1, j);\n        this.cumulateWeightsWithForwardEnergy(\n          i,\n          j,\n          weightIndex,\n          currentLineWeights,\n          previousLineWeights\n        );\n      }\n      let swapTmp = currentLineWeights;\n      currentLineWeights = previousLineWeights;\n      previousLineWeights = swapTmp;\n    }\n\n    // find index of last seam pixel\n    let lastIndex = 0;\n    let lastIndexWeight = Number.MAX_VALUE;\n\n    for (let i: number = 0; i < width; i++) {\n      let weight = currentLineWeights[i];\n      if (weight < lastIndexWeight) {\n        lastIndex = i;\n        lastIndexWeight = weight;\n      }\n    }\n\n    const weights = this.backPtrWeights;\n    const seam = new Array<number>(height);\n    seam[height - 1] = lastIndex;\n    for (let i: number = height - 2; i + 1 > 0; i--) {\n      let next = seam[i + 1];\n      let w = next + weights[next + (i + 1) * width];\n      seam[i] = w;\n    }\n\n    return seam;\n  }\n\n  private findVerticalSeam(): number[] {\n    if (this.forwardEnergy) {\n      return this.findVerticalSeamWithForwardEnergy();\n    }\n    return this.findVerticalSeamWithoutForwardEnergy();\n  }\n\n  shrinkWidth(): Uint8ClampedArray {\n    const seam = this.findVerticalSeam();\n    this.seam = seam;\n    const picture = this.picture;\n    const result = picture.data;\n    const oldHeight = Math.floor(picture.height);\n    const oldWidth = Math.floor(picture.width);\n    const newWidth = oldWidth - 1;\n    const oldPtrStep = oldWidth * 4;\n    const newPtrStep = newWidth * 4;\n    let oldPtr: number = 0;\n    let newPtr: number = 0;\n    for (\n      let y: number = 0; y < oldHeight; y++, oldPtr += oldPtrStep, newPtr += newPtrStep\n    ) {\n      let sy: number = seam[y] * 4;\n      result.copyWithin(newPtr, oldPtr, oldPtr + sy);\n      result.copyWithin(\n        newPtr + sy,\n        oldPtr + sy + (1 << 2),\n        oldPtr + oldPtrStep\n      );\n    }\n    return result;\n  }\n}\n","import { shrinkImage, shrinkWidth } from \"./seam-carving\";\n\n//\n// OffscreenCanvas polyfill\n// https://gist.github.com/n1ru4l/9c7eff52fe084d67ff15ae6b0af5f171\n//\nif (!window.OffscreenCanvas) {\n  (window as any).OffscreenCanvas = class OffscreenCanvas {\n    canvas: any;\n    constructor(width: number, height: number) {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvas.width = width;\n      this.canvas.height = height;\n      this.canvas.convertToBlob = () => new Promise((resolve) => { this.canvas.toBlob(resolve) });\n      return this.canvas;\n    }\n  };\n}\n\n\nconst dataUrl2ImageData = (url: string): Promise<ImageData> =>\n  new Promise((resolve) => {\n    const newimage = new Image();\n    newimage.src = url;\n    newimage.onload = () => {\n      const canvas = new OffscreenCanvas(newimage.width, newimage.height);\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(newimage, 0, 0);\n      resolve(ctx.getImageData(0, 0, newimage.width, newimage.height));\n    };\n  });\n\nconst loadImage = (file: any): Promise<ImageData> =>\n  new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const imageData = dataUrl2ImageData((event.currentTarget as any).result);\n      resolve(imageData);\n    };\n    reader.readAsDataURL(file);\n  });\n\nlet nextFrame: number | void = undefined;\n\nconst displayResultImage = (\n  imageData: ImageData,\n  wasmMemoryArray: Uint8ClampedArray\n) => {\n  const resultCanvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  const width = imageData.width - 10;\n  const height = imageData.height;\n  resultCanvas.width = width;\n  resultCanvas.height = height;\n  const resultCtx = resultCanvas.getContext(\"2d\");\n  const resultImageData = resultCtx.createImageData(width, height);\n  resultImageData.data.set(wasmMemoryArray.subarray(0, width * height * 4));\n  resultCtx.putImageData(resultImageData, 0, 0);\n  return resultImageData;\n};\n\nconst shrinkByHalf = (imageData: ImageData) => {\n  if (nextFrame) {\n    cancelAnimationFrame(nextFrame);\n  }\n\n  const originalWidth = imageData.width;\n\n  /*const ptrArr = wasm.__retain(\n    wasm.__allocArray(wasm.UINT8ARRAY_ID, imageData.data)\n  );\n  const resultPtr = fwdEnergy\n    ? wasm.shrinkWidthWithForwardEnergy(ptrArr, originalWidth)\n    : wasm.shrinkWidth(ptrArr, originalWidth);\n  const resultArray = wasm.__getUint8Array(resultPtr);\n  imageData = displayResultImage(imageData, resultArray);\n  wasm.__release(ptrArr);\n  wasm.__release(resultPtr);*/\n  var dataCopy = new Uint8ClampedArray(imageData.data);\n  /*const result = fwdEnergy\n  ? shrinkWidthWithForwardEnergy(dataCopy, originalWidth)\n  : shrinkWidth(dataCopy, originalWidth);*/\n  const result = shrinkWidth(dataCopy, originalWidth);\n\n  imageData = displayResultImage(imageData, result);\n\n  let frameDelta = 0;\n  const canvasCaption = document.getElementById(\"canvasCaption\");\n\n  const start = Date.now();\n  const shrink = (n: number) => {\n    const shrinkOneSeam = () => {\n      const result = shrinkImage();\n      imageData = displayResultImage(imageData, result);\n      frameDelta += 10;\n      const processingTime = Date.now() - start;\n      canvasCaption.innerHTML = `Width reduced by ${frameDelta}px after ${processingTime}ms`;\n      if (frameDelta < n) {\n        nextFrame = requestAnimationFrame(shrinkOneSeam);\n      }\n    };\n    nextFrame = requestAnimationFrame(shrinkOneSeam);\n  };\n\n  shrink(originalWidth / 2);\n};\n/*\nconst run = async () => {\n  await new Promise((resolve) => window.addEventListener(\"load\", resolve));\n\n\n  let imageData: ImageData;\n  let fwdEnergyFlag = false;\n\n  fetch(\"surfer-web.jpg\")\n    .then((response) => response.arrayBuffer())\n    .then((buffer) => {\n      const arrayBufferView = new Uint8Array(buffer);\n      const blob = new Blob([arrayBufferView], { type: \"image/jpeg\" });\n      const urlCreator = window.URL || window.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      return dataUrl2ImageData(imageUrl);\n    })\n    .then((data) => {\n      imageData = data;\n      shrinkByHalf(imageData, fwdEnergyFlag);\n    });\n\n  document\n    .getElementById(\"originalFile\")\n    .addEventListener(\"change\", async (evt) => {\n      const files = (evt.target as any).files;\n\n      imageData = await loadImage(files[0]);\n      shrinkByHalf(imageData, fwdEnergyFlag);\n    });\n\n  document\n    .getElementById(\"algo-classic\")\n    .addEventListener(\"click\", () => {\n      fwdEnergyFlag = false;\n      shrinkByHalf(imageData, fwdEnergyFlag);\n    });\n  document.getElementById(\"algo-fwd\").addEventListener(\"click\", () => {\n    fwdEnergyFlag = true;\n    shrinkByHalf(imageData, fwdEnergyFlag);\n  });\n};\nrun();*/\nexport const jsShrinkByHalf = shrinkByHalf;\n","import loader from \"@assemblyscript/loader\";\nimport { jsShrinkByHalf } from './index.js';\n\n//\n// OffscreenCanvas polyfill\n// https://gist.github.com/n1ru4l/9c7eff52fe084d67ff15ae6b0af5f171\n//\nif (!window.OffscreenCanvas) {\n  (window as any).OffscreenCanvas = class OffscreenCanvas {\n    canvas: any;\n    constructor(width: number, height: number) {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvas.width = width;\n      this.canvas.height = height;\n      this.canvas.convertToBlob = () => new Promise((resolve) => { this.canvas.toBlob(resolve) });\n      return this.canvas;\n    }\n  };\n}\n\nconst initWasm = async () => await loader.instantiate(fetch(\"optimized.wasm\"));\n\nconst dataUrl2ImageData = (url: string): Promise<ImageData> =>\n  new Promise((resolve) => {\n    const newimage = new Image();\n    newimage.src = url;\n    newimage.onload = () => {\n      const canvas = new OffscreenCanvas(newimage.width, newimage.height);\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(newimage, 0, 0);\n      resolve(ctx.getImageData(0, 0, newimage.width, newimage.height));\n    };\n  });\n\nconst loadImage = (file: any): Promise<ImageData> =>\n  new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const imageData = dataUrl2ImageData((event.currentTarget as any).result);\n      resolve(imageData);\n    };\n    reader.readAsDataURL(file);\n  });\n\nlet nextFrame: number | void = undefined;\n\nconst displayResultImage = (\n  imageData: ImageData,\n  wasmMemoryArray: Uint8Array\n) => {\n  const resultCanvas = document.getElementById(\"canvas\") as HTMLCanvasElement;\n  const width = imageData.width - 10;\n  const height = imageData.height;\n  resultCanvas.width = width;\n  resultCanvas.height = height;\n  const resultCtx = resultCanvas.getContext(\"2d\");\n  const resultImageData = resultCtx.createImageData(width, height);\n  resultImageData.data.set(wasmMemoryArray.subarray(0, width * height * 4));\n  resultCtx.putImageData(resultImageData, 0, 0);\n  return resultImageData;\n};\n\nconst asShrinkByHalf = (imageData: ImageData, wasm: any, useSimd: boolean) => {\n  if (nextFrame) {\n    cancelAnimationFrame(nextFrame);\n  }\n\n  const originalWidth = imageData.width;\n\n  const { __pin, __unpin, __newArray, __getArray, __getArrayView, __getUint8ArrayView, UINT8ARRAY_ID, shrinkWidthWithForwardEnergy, shrinkWidth } = wasm.exports\n\n  const ptrArr = __pin(\n    __newArray(UINT8ARRAY_ID, imageData.data)\n  );\n\n  const resultPtr = useSimd\n    ? shrinkWidth(ptrArr, originalWidth, true)\n    : shrinkWidth(ptrArr, originalWidth, false);\n  const resultArray = __getUint8ArrayView(resultPtr);\n  imageData = displayResultImage(imageData, resultArray);\n  __unpin(ptrArr);\n  //__unpin(resultPtr);\n\n  let frameDelta = 0;\n  const canvasCaption = document.getElementById(\"canvasCaption\");\n  const start = Date.now();\n\n  const shrink = (n: number) => {\n    const shrinkOneSeam = () => {\n      const resultPtr = wasm.exports.shrink();\n      const resultArray = __getUint8ArrayView(resultPtr);\n      imageData = displayResultImage(imageData, resultArray);\n      //__unpin(resultPtr);\n      frameDelta += 10;\n      const processingTime = Date.now() - start;\n      canvasCaption.innerHTML = `Width reduced by ${frameDelta}px after ${processingTime}ms`;\n      if (frameDelta < n) {\n        nextFrame = requestAnimationFrame(shrinkOneSeam);\n      } \n    };\n    nextFrame = requestAnimationFrame(shrinkOneSeam);\n  };\n\n  shrink(originalWidth / 2);\n};\n\nconst run = async () => {\n  await new Promise((resolve) => window.addEventListener(\"load\", resolve));\n\n  const wasm = (await initWasm()) as any;\n  console.log(wasm)\n\n  let imageData: ImageData;\n  let useWasmFlag = false;\n  let useSimdFlag = false;\n\n  const shrinkByHalf = (imageData: ImageData) => {\n    if (useWasmFlag) {\n      asShrinkByHalf(imageData, wasm, useSimdFlag);\n    } else {\n      jsShrinkByHalf(imageData);\n    }\n  }\n\n  fetch(\"surfer-web.jpg\")\n    .then((response) => response.arrayBuffer())\n    .then((buffer) => {\n      const arrayBufferView = new Uint8Array(buffer);\n      const blob = new Blob([arrayBufferView], { type: \"image/jpeg\" });\n      const urlCreator = window.URL || window.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      return dataUrl2ImageData(imageUrl);\n    })\n    .then((data) => {\n      imageData = data;\n      shrinkByHalf(imageData);\n    });\n\n  document\n    .getElementById(\"originalFile\")\n    .addEventListener(\"change\", async (evt) => {\n      const files = (evt.target as any).files;\n\n      imageData = await loadImage(files[0]);\n      shrinkByHalf(imageData);\n    });\n\n  document\n    .getElementById(\"implem-js\")\n    .addEventListener(\"click\", () => {\n      useWasmFlag = false;\n      useSimdFlag = false;\n      shrinkByHalf(imageData);\n    });\n  document\n    .getElementById(\"implem-as\")\n    .addEventListener(\"click\", () => {\n      useWasmFlag = true;\n      useSimdFlag = false;\n      shrinkByHalf(imageData);\n    });\n  document.getElementById(\"implem-as-simd\").addEventListener(\"click\", () => {\n    useWasmFlag = true;\n    useSimdFlag = true;\n    shrinkByHalf(imageData);\n  });\n};\nrun();\n"]}