{"version":3,"sources":["../node_modules/@assemblyscript/loader/index.js","index.ts"],"names":[],"mappings":"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","file":"src.7ad750bb.js","sourceRoot":"../src","sourcesContent":["\"use strict\";\n\n// Runtime header offsets\nconst ID_OFFSET = -8;\nconst SIZE_OFFSET = -4;\n\n// Runtime ids\nconst ARRAYBUFFER_ID = 0;\nconst STRING_ID = 1;\nconst ARRAYBUFFERVIEW_ID = 2;\n\n// Runtime type information\nconst ARRAYBUFFERVIEW = 1 << 0;\nconst ARRAY = 1 << 1;\nconst SET = 1 << 2;\nconst MAP = 1 << 3;\nconst VAL_ALIGN_OFFSET = 5;\nconst VAL_ALIGN = 1 << VAL_ALIGN_OFFSET;\nconst VAL_SIGNED = 1 << 10;\nconst VAL_FLOAT = 1 << 11;\nconst VAL_NULLABLE = 1 << 12;\nconst VAL_MANAGED = 1 << 13;\nconst KEY_ALIGN_OFFSET = 14;\nconst KEY_ALIGN = 1 << KEY_ALIGN_OFFSET;\nconst KEY_SIGNED = 1 << 19;\nconst KEY_FLOAT = 1 << 20;\nconst KEY_NULLABLE = 1 << 21;\nconst KEY_MANAGED = 1 << 22;\n\n// Array(BufferView) layout\nconst ARRAYBUFFERVIEW_BUFFER_OFFSET = 0;\nconst ARRAYBUFFERVIEW_DATASTART_OFFSET = 4;\nconst ARRAYBUFFERVIEW_DATALENGTH_OFFSET = 8;\nconst ARRAYBUFFERVIEW_SIZE = 12;\nconst ARRAY_LENGTH_OFFSET = 12;\nconst ARRAY_SIZE = 16;\n\nconst BIGINT = typeof BigUint64Array !== \"undefined\";\nconst THIS = Symbol();\nconst CHUNKSIZE = 1024;\n\n/** Gets a string from an U32 and an U16 view on a memory. */\nfunction getStringImpl(buffer, ptr) {\n  const U32 = new Uint32Array(buffer);\n  const U16 = new Uint16Array(buffer);\n  var length = U32[(ptr + SIZE_OFFSET) >>> 2] >>> 1;\n  var offset = ptr >>> 1;\n  if (length <= CHUNKSIZE) return String.fromCharCode.apply(String, U16.subarray(offset, offset + length));\n  const parts = [];\n  do {\n    const last = U16[offset + CHUNKSIZE - 1];\n    const size = last >= 0xD800 && last < 0xDC00 ? CHUNKSIZE - 1 : CHUNKSIZE;\n    parts.push(String.fromCharCode.apply(String, U16.subarray(offset, offset += size)));\n    length -= size;\n  } while (length > CHUNKSIZE);\n  return parts.join(\"\") + String.fromCharCode.apply(String, U16.subarray(offset, offset + length));\n}\n\n/** Prepares the base module prior to instantiation. */\nfunction preInstantiate(imports) {\n  const baseModule = {};\n\n  function getString(memory, ptr) {\n    if (!memory) return \"<yet unknown>\";\n    return getStringImpl(memory.buffer, ptr);\n  }\n\n  // add common imports used by stdlib for convenience\n  const env = (imports.env = imports.env || {});\n  env.abort = env.abort || function abort(mesg, file, line, colm) {\n    const memory = baseModule.memory || env.memory; // prefer exported, otherwise try imported\n    throw Error(\"abort: \" + getString(memory, mesg) + \" at \" + getString(memory, file) + \":\" + line + \":\" + colm);\n  }\n  env.trace = env.trace || function trace(mesg, n) {\n    const memory = baseModule.memory || env.memory;\n    console.log(\"trace: \" + getString(memory, mesg) + (n ? \" \" : \"\") + Array.prototype.slice.call(arguments, 2, 2 + n).join(\", \"));\n  }\n  imports.Math = imports.Math || Math;\n  imports.Date = imports.Date || Date;\n\n  return baseModule;\n}\n\n/** Prepares the final module once instantiation is complete. */\nfunction postInstantiate(baseModule, instance) {\n  const rawExports = instance.exports;\n  const memory = rawExports.memory;\n  const table = rawExports.table;\n  const alloc = rawExports[\"__alloc\"];\n  const retain = rawExports[\"__retain\"];\n  const rttiBase = rawExports[\"__rtti_base\"] || ~0; // oob if not present\n\n  /** Gets the runtime type info for the given id. */\n  function getInfo(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = U32[rttiBase >>> 2];\n    if ((id >>>= 0) >= count) throw Error(\"invalid id: \" + id);\n    return U32[(rttiBase + 4 >>> 2) + id * 2];\n  }\n\n  /** Gets the runtime base id for the given id. */\n  function getBase(id) {\n    const U32 = new Uint32Array(memory.buffer);\n    const count = U32[rttiBase >>> 2];\n    if ((id >>>= 0) >= count) throw Error(\"invalid id: \" + id);\n    return U32[(rttiBase + 4 >>> 2) + id * 2 + 1];\n  }\n\n  /** Gets the runtime alignment of a collection's values. */\n  function getValueAlign(info) {\n    return 31 - Math.clz32((info >>> VAL_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Gets the runtime alignment of a collection's keys. */\n  function getKeyAlign(info) {\n    return 31 - Math.clz32((info >>> KEY_ALIGN_OFFSET) & 31); // -1 if none\n  }\n\n  /** Allocates a new string in the module's memory and returns its retained pointer. */\n  function __allocString(str) {\n    const length = str.length;\n    const ptr = alloc(length << 1, STRING_ID);\n    const U16 = new Uint16Array(memory.buffer);\n    for (var i = 0, p = ptr >>> 1; i < length; ++i) U16[p + i] = str.charCodeAt(i);\n    return ptr;\n  }\n\n  baseModule.__allocString = __allocString;\n\n  /** Reads a string from the module's memory by its pointer. */\n  function __getString(ptr) {\n    const buffer = memory.buffer;\n    const id = new Uint32Array(buffer)[ptr + ID_OFFSET >>> 2];\n    if (id !== STRING_ID) throw Error(\"not a string: \" + ptr);\n    return getStringImpl(buffer, ptr);\n  }\n\n  baseModule.__getString = __getString;\n\n  /** Gets the view matching the specified alignment, signedness and floatness. */\n  function getView(alignLog2, signed, float) {\n    const buffer = memory.buffer;\n    if (float) {\n      switch (alignLog2) {\n        case 2: return new Float32Array(buffer);\n        case 3: return new Float64Array(buffer);\n      }\n    } else {\n      switch (alignLog2) {\n        case 0: return new (signed ? Int8Array : Uint8Array)(buffer);\n        case 1: return new (signed ? Int16Array : Uint16Array)(buffer);\n        case 2: return new (signed ? Int32Array : Uint32Array)(buffer);\n        case 3: return new (signed ? BigInt64Array : BigUint64Array)(buffer);\n      }\n    }\n    throw Error(\"unsupported align: \" + alignLog2);\n  }\n\n  /** Allocates a new array in the module's memory and returns its retained pointer. */\n  function __allocArray(id, values) {\n    const info = getInfo(id);\n    if (!(info & (ARRAYBUFFERVIEW | ARRAY))) throw Error(\"not an array: \" + id + \" @ \" + info);\n    const align = getValueAlign(info);\n    const length = values.length;\n    const buf = alloc(length << align, ARRAYBUFFER_ID);\n    const arr = alloc(info & ARRAY ? ARRAY_SIZE : ARRAYBUFFERVIEW_SIZE, id);\n    const U32 = new Uint32Array(memory.buffer);\n    U32[arr + ARRAYBUFFERVIEW_BUFFER_OFFSET >>> 2] = retain(buf);\n    U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2] = buf;\n    U32[arr + ARRAYBUFFERVIEW_DATALENGTH_OFFSET >>> 2] = length << align;\n    if (info & ARRAY) U32[arr + ARRAY_LENGTH_OFFSET >>> 2] = length;\n    const view = getView(align, info & VAL_SIGNED, info & VAL_FLOAT);\n    if (info & VAL_MANAGED) {\n      for (let i = 0; i < length; ++i) view[(buf >>> align) + i] = retain(values[i]);\n    } else {\n      view.set(values, buf >>> align);\n    }\n    return arr;\n  }\n\n  baseModule.__allocArray = __allocArray;\n\n  /** Gets a live view on an array's values in the module's memory. Infers the array type from RTTI. */\n  function __getArrayView(arr) {\n    const U32 = new Uint32Array(memory.buffer);\n    const id = U32[arr + ID_OFFSET >>> 2];\n    const info = getInfo(id);\n    if (!(info & ARRAYBUFFERVIEW)) throw Error(\"not an array: \" + id);\n    const align = getValueAlign(info);\n    var buf = U32[arr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    const length = info & ARRAY\n      ? U32[arr + ARRAY_LENGTH_OFFSET >>> 2]\n      : U32[buf + SIZE_OFFSET >>> 2] >>> align;\n    return getView(align, info & VAL_SIGNED, info & VAL_FLOAT)\n          .subarray(buf >>>= align, buf + length);\n  }\n\n  baseModule.__getArrayView = __getArrayView;\n\n  /** Copies an array's values from the module's memory. Infers the array type from RTTI. */\n  function __getArray(arr) {\n    const input = __getArrayView(arr);\n    const len = input.length;\n    const out = new Array(len);\n    for (let i = 0; i < len; i++) out[i] = input[i];\n    return out;\n  }\n\n  baseModule.__getArray = __getArray;\n\n  /** Copies an ArrayBuffer's value from the module's memory. */\n  function __getArrayBuffer(ptr) {\n    const buffer = memory.buffer;\n    const length = new Uint32Array(buffer)[ptr + SIZE_OFFSET >>> 2];\n    return buffer.slice(ptr, ptr + length);\n  }\n\n  baseModule.__getArrayBuffer = __getArrayBuffer;\n\n  /** Copies a typed array's values from the module's memory. */\n  function getTypedArray(Type, alignLog2, ptr) {\n    return new Type(getTypedArrayView(Type, alignLog2, ptr));\n  }\n\n  /** Gets a live view on a typed array's values in the module's memory. */\n  function getTypedArrayView(Type, alignLog2, ptr) {\n    const buffer = memory.buffer;\n    const U32 = new Uint32Array(buffer);\n    const bufPtr = U32[ptr + ARRAYBUFFERVIEW_DATASTART_OFFSET >>> 2];\n    return new Type(buffer, bufPtr, U32[bufPtr + SIZE_OFFSET >>> 2] >>> alignLog2);\n  }\n\n  baseModule.__getInt8Array = getTypedArray.bind(null, Int8Array, 0);\n  baseModule.__getInt8ArrayView = getTypedArrayView.bind(null, Int8Array, 0);\n  baseModule.__getUint8Array = getTypedArray.bind(null, Uint8Array, 0);\n  baseModule.__getUint8ArrayView = getTypedArrayView.bind(null, Uint8Array, 0);\n  baseModule.__getUint8ClampedArray = getTypedArray.bind(null, Uint8ClampedArray, 0);\n  baseModule.__getUint8ClampedArrayView = getTypedArrayView.bind(null, Uint8ClampedArray, 0);\n  baseModule.__getInt16Array = getTypedArray.bind(null, Int16Array, 1);\n  baseModule.__getInt16ArrayView = getTypedArrayView.bind(null, Int16Array, 1);\n  baseModule.__getUint16Array = getTypedArray.bind(null, Uint16Array, 1);\n  baseModule.__getUint16ArrayView = getTypedArrayView.bind(null, Uint16Array, 1);\n  baseModule.__getInt32Array = getTypedArray.bind(null, Int32Array, 2);\n  baseModule.__getInt32ArrayView = getTypedArrayView.bind(null, Int32Array, 2);\n  baseModule.__getUint32Array = getTypedArray.bind(null, Uint32Array, 2);\n  baseModule.__getUint32ArrayView = getTypedArrayView.bind(null, Uint32Array, 2);\n  if (BIGINT) {\n    baseModule.__getInt64Array = getTypedArray.bind(null, BigInt64Array, 3);\n    baseModule.__getInt64ArrayView = getTypedArrayView.bind(null, BigInt64Array, 3);\n    baseModule.__getUint64Array = getTypedArray.bind(null, BigUint64Array, 3);\n    baseModule.__getUint64ArrayView = getTypedArrayView.bind(null, BigUint64Array, 3);\n  }\n  baseModule.__getFloat32Array = getTypedArray.bind(null, Float32Array, 2);\n  baseModule.__getFloat32ArrayView = getTypedArrayView.bind(null, Float32Array, 2);\n  baseModule.__getFloat64Array = getTypedArray.bind(null, Float64Array, 3);\n  baseModule.__getFloat64ArrayView = getTypedArrayView.bind(null, Float64Array, 3);\n\n  /** Tests whether an object is an instance of the class represented by the specified base id. */\n  function __instanceof(ptr, baseId) {\n    const U32 = new Uint32Array(memory.buffer);\n    var id = U32[(ptr + ID_OFFSET) >>> 2];\n    if (id <= U32[rttiBase >>> 2]) {\n      do if (id == baseId) return true;\n      while (id = getBase(id));\n    }\n    return false;\n  }\n\n  baseModule.__instanceof = __instanceof;\n\n  // Pull basic exports to baseModule so code in preInstantiate can use them\n  baseModule.memory = baseModule.memory || memory;\n  baseModule.table  = baseModule.table  || table;\n\n  // Demangle exports and provide the usual utility on the prototype\n  return demangle(rawExports, baseModule);\n}\n\nfunction isResponse(o) {\n  return typeof Response !== \"undefined\" && o instanceof Response;\n}\n\n/** Asynchronously instantiates an AssemblyScript module from anything that can be instantiated. */\nasync function instantiate(source, imports) {\n  if (isResponse(source = await source)) return instantiateStreaming(source, imports);\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    await WebAssembly.instantiate(\n      source instanceof WebAssembly.Module\n        ? source\n        : await WebAssembly.compile(source),\n      imports\n    )\n  );\n}\n\nexports.instantiate = instantiate;\n\n/** Synchronously instantiates an AssemblyScript module from a WebAssembly.Module or binary buffer. */\nfunction instantiateSync(source, imports) {\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    new WebAssembly.Instance(\n      source instanceof WebAssembly.Module\n        ? source\n        : new WebAssembly.Module(source),\n      imports\n    )\n  )\n}\n\nexports.instantiateSync = instantiateSync;\n\n/** Asynchronously instantiates an AssemblyScript module from a response, i.e. as obtained by `fetch`. */\nasync function instantiateStreaming(source, imports) {\n  if (!WebAssembly.instantiateStreaming) {\n    return instantiate(\n      isResponse(source = await source)\n        ? source.arrayBuffer()\n        : source,\n      imports\n    );\n  }\n  return postInstantiate(\n    preInstantiate(imports || (imports = {})),\n    (await WebAssembly.instantiateStreaming(source, imports)).instance\n  );\n}\n\nexports.instantiateStreaming = instantiateStreaming;\n\n/** Demangles an AssemblyScript module's exports to a friendly object structure. */\nfunction demangle(exports, baseModule) {\n  var module = baseModule ? Object.create(baseModule) : {};\n  var setArgumentsLength = exports[\"__argumentsLength\"]\n    ? function(length) { exports[\"__argumentsLength\"].value = length; }\n    : exports[\"__setArgumentsLength\"] || exports[\"__setargc\"] || function() {};\n  for (let internalName in exports) {\n    if (!Object.prototype.hasOwnProperty.call(exports, internalName)) continue;\n    const elem = exports[internalName];\n    let parts = internalName.split(\".\");\n    let curr = module;\n    while (parts.length > 1) {\n      let part = parts.shift();\n      if (!Object.prototype.hasOwnProperty.call(curr, part)) curr[part] = {};\n      curr = curr[part];\n    }\n    let name = parts[0];\n    let hash = name.indexOf(\"#\");\n    if (hash >= 0) {\n      let className = name.substring(0, hash);\n      let classElem = curr[className];\n      if (typeof classElem === \"undefined\" || !classElem.prototype) {\n        let ctor = function(...args) {\n          return ctor.wrap(ctor.prototype.constructor(0, ...args));\n        };\n        ctor.prototype = {\n          valueOf: function valueOf() {\n            return this[THIS];\n          }\n        };\n        ctor.wrap = function(thisValue) {\n          return Object.create(ctor.prototype, { [THIS]: { value: thisValue, writable: false } });\n        };\n        if (classElem) Object.getOwnPropertyNames(classElem).forEach(name =>\n          Object.defineProperty(ctor, name, Object.getOwnPropertyDescriptor(classElem, name))\n        );\n        curr[className] = ctor;\n      }\n      name = name.substring(hash + 1);\n      curr = curr[className].prototype;\n      if (/^(get|set):/.test(name)) {\n        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n          let getter = exports[internalName.replace(\"set:\", \"get:\")];\n          let setter = exports[internalName.replace(\"get:\", \"set:\")];\n          Object.defineProperty(curr, name, {\n            get: function() { return getter(this[THIS]); },\n            set: function(value) { setter(this[THIS], value); },\n            enumerable: true\n          });\n        }\n      } else {\n        if (name === 'constructor') {\n          (curr[name] = (...args) => {\n            setArgumentsLength(args.length);\n            return elem(...args);\n          }).original = elem;\n        } else { // instance method\n          (curr[name] = function(...args) { // !\n            setArgumentsLength(args.length);\n            return elem(this[THIS], ...args);\n          }).original = elem;\n        }\n      }\n    } else {\n      if (/^(get|set):/.test(name)) {\n        if (!Object.prototype.hasOwnProperty.call(curr, name = name.substring(4))) {\n          Object.defineProperty(curr, name, {\n            get: exports[internalName.replace(\"set:\", \"get:\")],\n            set: exports[internalName.replace(\"get:\", \"set:\")],\n            enumerable: true\n          });\n        }\n      } else if (typeof elem === \"function\" && elem !== setArgumentsLength) {\n        (curr[name] = (...args) => {\n          setArgumentsLength(args.length);\n          return elem(...args);\n        }).original = elem;\n      } else {\n        curr[name] = elem;\n      }\n    }\n  }\n  return module;\n}\n\nexports.demangle = demangle;\n","import loader from \"@assemblyscript/loader\";\n\n//\n// OffscreenCanvas polyfill\n// https://gist.github.com/n1ru4l/9c7eff52fe084d67ff15ae6b0af5f171\n//\nif (!window.OffscreenCanvas) {\n  (window as any).OffscreenCanvas = class OffscreenCanvas {\n    canvas: any;\n    constructor(width, height) {\n      this.canvas = document.createElement(\"canvas\");\n      this.canvas.width = width;\n      this.canvas.height = height;\n\n      this.canvas.convertToBlob = () => {\n        return new Promise((resolve) => {\n          this.canvas.toBlob(resolve);\n        });\n      };\n\n      return this.canvas;\n    }\n  };\n}\n\nconst initWasm = async () => {\n  const initial = 1;\n  const memory = new WebAssembly.Memory({ initial });\n\n  let logRef = { log: console.log };\n\n  const importObject = {\n    env: {\n      memory,\n      abort: () => console.log(\"Abort!\"),\n      trace: (msg: any, nb: number, value: number) => logRef.log(msg, value),\n    },\n  };\n\n  const myModule = await loader.instantiate(\n    fetch(\"optimized.wasm\"),\n    importObject\n  );\n  logRef.log = (msg: any, value: number) =>\n    console.log(myModule.__getString(msg), value);\n  console.log(myModule);\n  return myModule;\n};\n\nconst dataUrl2ImageData = (url: string): Promise<ImageData> =>\n  new Promise((resolve) => {\n    const newimage = new Image();\n    newimage.src = url;\n    newimage.onload = () => {\n      const canvas = new OffscreenCanvas(newimage.width, newimage.height);\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(newimage, 0, 0);\n      const imageData = ctx.getImageData(0, 0, newimage.width, newimage.height);\n      resolve(imageData);\n    };\n  });\n\nconst loadImage = (file: any): Promise<ImageData> =>\n  new Promise((resolve) => {\n    const reader = new FileReader();\n    reader.onload = (event) => {\n      const imageData = dataUrl2ImageData((event.currentTarget as any).result);\n      resolve(imageData);\n    };\n    reader.readAsDataURL(file);\n  });\n\nlet nextFrame: number | void = undefined;\n\nconst displayResultImage = (\n  imageData: ImageData,\n  wasmMemoryArray: Uint8Array\n) => {\n  const resultCanvas: HTMLCanvasElement = document.getElementById(\n    \"canvas\"\n  ) as any;\n  resultCanvas.width = imageData.width - 1;\n  resultCanvas.height = imageData.height;\n  const resultCtx = resultCanvas.getContext(\"2d\");\n  const resultImageData = resultCtx.createImageData(\n    resultCanvas.width,\n    resultCanvas.height\n  );\n  resultImageData.data.set(\n    wasmMemoryArray.subarray(0, resultCanvas.width * resultCanvas.height * 4)\n  );\n  resultCtx.putImageData(resultImageData, 0, 0);\n  return resultImageData;\n};\n\nconst shrinkByHalf = (imageData: ImageData, wasm: any, fwdEnergy: boolean) => {\n  if (nextFrame) {\n    cancelAnimationFrame(nextFrame);\n  }\n\n  const originalWidth = imageData.width;\n\n  const ptrArr = wasm.__retain(\n    wasm.__allocArray(wasm.UINT8ARRAY_ID, imageData.data)\n  );\n  const resultPtr = fwdEnergy\n    ? wasm.shrinkWidthWithForwardEnergy(ptrArr, imageData.width)\n    : wasm.shrinkWidth(ptrArr, imageData.width);\n  const resultArray = wasm.__getUint8Array(resultPtr);\n  imageData = displayResultImage(imageData, resultArray);\n  wasm.__release(ptrArr);\n  wasm.__release(resultPtr);\n\n  const animationState = {\n    frame: 0,\n  };\n  const shrink = (n: number) => {\n    const shrinkOneSeam = () => {\n      const resultPtr = wasm.shrink();\n      const resultArray = wasm.__getUint8Array(resultPtr);\n      imageData = displayResultImage(imageData, resultArray);\n      wasm.__release(resultPtr);\n      animationState.frame = animationState.frame + 1;\n      document.getElementById(\n        \"canvasCaption\"\n      ).innerHTML = `Width reduced by ${animationState.frame}px`;\n      if (animationState.frame < n) {\n        nextFrame = requestAnimationFrame(shrinkOneSeam);\n      }\n    };\n    nextFrame = requestAnimationFrame(shrinkOneSeam);\n  };\n\n  shrink(originalWidth / 2);\n};\n\nconst run = async () => {\n  await new Promise((resolve) => window.addEventListener(\"load\", resolve));\n\n  const wasm = (await initWasm()) as any;\n\n  console.log(\"coucou\", wasm.coucou());\n\n  let imageData: ImageData = undefined;\n  let fwdEnergyFlag = false;\n\n  fetch(\"surfer-web.jpg\")\n    .then((response) => response.arrayBuffer())\n    .then((buffer) => {\n      const arrayBufferView = new Uint8Array(buffer);\n      const blob = new Blob([arrayBufferView], { type: \"image/jpeg\" });\n      const urlCreator = window.URL || window.webkitURL;\n      const imageUrl = urlCreator.createObjectURL(blob);\n      return dataUrl2ImageData(imageUrl);\n    })\n    .then((data) => {\n      imageData = data;\n      shrinkByHalf(imageData, wasm, fwdEnergyFlag);\n    });\n\n  document\n    .getElementById(\"originalFile\")\n    .addEventListener(\"change\", async (evt) => {\n      const files = (evt.target as any).files;\n\n      imageData = await loadImage(files[0]);\n      shrinkByHalf(imageData, wasm, fwdEnergyFlag);\n    });\n\n  document\n    .getElementById(\"algo-classic\")\n    .addEventListener(\"click\", async (evt) => {\n      fwdEnergyFlag = false;\n      shrinkByHalf(imageData, wasm, fwdEnergyFlag);\n    });\n  document.getElementById(\"algo-fwd\").addEventListener(\"click\", async (evt) => {\n    fwdEnergyFlag = true;\n    shrinkByHalf(imageData, wasm, fwdEnergyFlag);\n  });\n};\nrun();\n"]}